// -----------------------------------------------------------------
// <copyright file="CanThrowBetweenEventCondition.cs" company="2Dudes">
// Copyright (c) 2018 2Dudes. All rights reserved.
// Author: Jose L. Nunez de Caceres
// http://linkedin.com/in/jlnunez89
//
// Licensed under the MIT license.
// See LICENSE file in the project root for full license information.
// </copyright>
// -----------------------------------------------------------------

namespace OpenTibia.Server.Operations.Conditions
{
    using System;
    using OpenTibia.Common.Utilities;
    using OpenTibia.Scheduling.Contracts.Abstractions;
    using OpenTibia.Server.Contracts.Abstractions;
    using OpenTibia.Server.Contracts.Enumerations;
    using OpenTibia.Server.Contracts.Structs;

    /// <summary>
    /// Class that represents a condition that evaluates whether a throw from A to B can be performed.
    /// </summary>
    public class CanThrowBetweenEventCondition : IEventCondition
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CanThrowBetweenEventCondition"/> class.
        /// </summary>
        /// <param name="tileAccessor">A reference to the tile accessor instance.</param>
        /// <param name="requestor">The creature requesting the throw.</param>
        /// <param name="determineSourceLocationFunc">A function delegate to determine the source location of the throw.</param>
        /// <param name="determineDestinationLocationFunc">A function delegate to determine the destination location of the throw.</param>
        /// <param name="checkLineOfSight">Whether or not to check the line of sight.</param>
        public CanThrowBetweenEventCondition(
            ITileAccessor tileAccessor,
            ICreature requestor,
            Func<Location> determineSourceLocationFunc,
            Func<Location> determineDestinationLocationFunc,
            bool checkLineOfSight = true)
        {
            tileAccessor.ThrowIfNull(nameof(tileAccessor));
            determineSourceLocationFunc.ThrowIfNull(nameof(determineSourceLocationFunc));
            determineDestinationLocationFunc.ThrowIfNull(nameof(determineDestinationLocationFunc));

            this.TileAccessor = tileAccessor;
            this.Requestor = requestor;
            this.GetSourceLocation = determineSourceLocationFunc;
            this.GetDestinationLocation = determineDestinationLocationFunc;
            this.CheckLineOfSight = checkLineOfSight;
        }

        public ITileAccessor TileAccessor { get; }

        /// <summary>
        /// Gets the delegate function to determine the source location of the throw.
        /// </summary>
        public Func<Location> GetSourceLocation { get; }

        /// <summary>
        /// Gets the delegate function to determine the destination location of the throw.
        /// </summary>
        public Func<Location> GetDestinationLocation { get; }

        /// <summary>
        /// Gets a value indicating whether the line of sight should be checked.
        /// </summary>
        public bool CheckLineOfSight { get; }

        /// <summary>
        /// Gets the creature requesting the throw.
        /// </summary>
        public ICreature Requestor { get; }

        /// <inheritdoc/>
        public string ErrorMessage => "You may not throw there.";

        /// <inheritdoc/>
        public bool Evaluate()
        {
            if (this.Requestor == null)
            {
                // Means that this is a event generated by something other than a creature, possibly a script.
                return true;
            }

            return this.CanThrowBetweenMapLocations(this.GetSourceLocation(), this.GetDestinationLocation(), this.CheckLineOfSight);
        }

        /// <summary>
        /// Checks if a throw between two map locations is valid.
        /// </summary>
        /// <param name="fromLocation">The first location.</param>
        /// <param name="toLocation">The second location.</param>
        /// <param name="checkLineOfSight">Optional. A value indicating whether to consider line of sight.</param>
        /// <returns>True if the throw is valid, false otherwise.</returns>
        protected bool CanThrowBetweenMapLocations(Location fromLocation, Location toLocation, bool checkLineOfSight = true)
        {
            if (fromLocation.Type != LocationType.Map || toLocation.Type != LocationType.Map)
            {
                return false;
            }

            if (fromLocation == toLocation)
            {
                return true;
            }

            // Cannot throw across the surface boundary (floor 7).
            if ((fromLocation.Z >= 8 && toLocation.Z <= 7) || (toLocation.Z >= 8 && fromLocation.Z <= 7))
            {
                return false;
            }

            var deltaX = Math.Abs(fromLocation.X - toLocation.X);
            var deltaY = Math.Abs(fromLocation.Y - toLocation.Y);
            var deltaZ = Math.Abs(fromLocation.Z - toLocation.Z);

            // distance checks
            if (deltaX - deltaZ >= (IMap.DefaultWindowSizeX / 2) || deltaY - deltaZ >= (IMap.DefaultWindowSizeY / 2))
            {
                return false;
            }

            return !checkLineOfSight || this.InLineOfSight(fromLocation, toLocation) || this.InLineOfSight(toLocation, fromLocation);
        }

        /// <summary>
        /// Checks if a map location is in the line of sight of another map location.
        /// </summary>
        /// <param name="firstLocation">The first location.</param>
        /// <param name="secondLocation">The second location.</param>
        /// <returns>True if the second location is considered within the line of sight of the first location, false otherwise.</returns>
        private bool InLineOfSight(Location firstLocation, Location secondLocation)
        {
            if (firstLocation.Type != LocationType.Map || secondLocation.Type != LocationType.Map)
            {
                return false;
            }

            if (firstLocation == secondLocation)
            {
                return true;
            }

            // Normalize so that the check always happens from 'high to low' floors.
            var origin = firstLocation.Z > secondLocation.Z ? secondLocation : firstLocation;
            var target = firstLocation.Z > secondLocation.Z ? firstLocation : secondLocation;

            // Define positive or negative steps, depending on where the target location is wrt the origin location.
            var stepX = (sbyte)(origin.X < target.X ? 1 : origin.X == target.X ? 0 : -1);
            var stepY = (sbyte)(origin.Y < target.Y ? 1 : origin.Y == target.Y ? 0 : -1);

            var a = target.Y - origin.Y;
            var b = origin.X - target.X;
            var c = -((a * target.X) + (b * target.Y));

            while ((origin - target).MaxValueIn2D != 0)
            {
                var moveHorizontal = Math.Abs((a * (origin.X + stepX)) + (b * origin.Y) + c);
                var moveVertical = Math.Abs((a * origin.X) + (b * (origin.Y + stepY)) + c);
                var moveCross = Math.Abs((a * (origin.X + stepX)) + (b * (origin.Y + stepY)) + c);

                if (origin.Y != target.Y && (origin.X == target.X || moveHorizontal > moveVertical || moveHorizontal > moveCross))
                {
                    origin.Y += stepY;
                }

                if (origin.X != target.X && (origin.Y == target.Y || moveVertical > moveHorizontal || moveVertical > moveCross))
                {
                    origin.X += stepX;
                }

                if (this.TileAccessor.GetTileAt(origin, out ITile tile) && tile.BlocksThrow)
                {
                    return false;
                }
            }

            while (origin.Z != target.Z)
            {
                // now we need to perform a jump between floors to see if everything is clear (literally)
                if (this.TileAccessor.GetTileAt(origin, out ITile tile) && tile.Ground != null)
                {
                    return false;
                }

                origin.Z++;
            }

            return true;
        }
    }
}